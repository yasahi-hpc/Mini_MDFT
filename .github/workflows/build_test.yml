# SPDX-FileCopyrightText: (C) The Mini-MDFT development team, see COPYRIGHT.md file
#
# SPDX-License-Identifier: MIT

name: CI

on:
  pull_request:
    branches:
      - main

env:
  # Force the use of BuildKit for Docker
  DOCKER_BUILDKIT: 1

jobs:
  # run linter on the code
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: DoozyX/clang-format-lint-action@v0.18
      with:
        source: 'common/ unit_test/ src/'
        exclude: ''
        extensions: 'hpp,cpp'
        clangFormatVersion: 17

  # check if Docker images should be recreated
  check_docker_files:
    uses: ./.github/workflows/__check_docker_files.yml

    with:
      event_name: ${{ github.event_name }}

  # build Docker images if necessary
  build_base:
    needs: check_docker_files

    if: ${{ needs.check_docker_files.outputs.docker_files_have_changed == 'true' }}

    uses: ./.github/workflows/__build_base.yml
    permissions:
      contents: read
      packages: write

    with:
      image_suffix: ${{ needs.check_docker_files.outputs.image_suffix }}
      image_tag: ${{ needs.check_docker_files.outputs.image_tag }}

  # build project
  build:
    runs-on: ubuntu-latest

    needs:
      - check_docker_files
      - build_base

    # run this job even if build_base did not run
    if: ${{ ! cancelled() && (needs.build_base.result == 'success' || needs.build_base.result == 'skipped') }}

    strategy:
      matrix:
        backend:
          - name: clang-tidy
            image: clang
            compiler:
              cxx: clang++
            cmake_flags:
              kokkos: -DKokkos_ENABLE_SERIAL=ON
              kokkos_fft:
              mini_mdft: -DCMAKE_CXX_FLAGS="-Wall -Wextra" -DCMAKE_COMPILE_WARNING_AS_ERROR=ON -DCMAKE_CXX_CLANG_TIDY="clang-tidy;-warnings-as-errors=*"
          - name: openmp
            image: gcc
            compiler:
              cxx: g++
            cmake_flags:
              kokkos: -DKokkos_ENABLE_OPENMP=ON
              kokkos_fft:
              mini_mdft:
          - name: threads
            image: gcc
            compiler:
              cxx: g++
            cmake_flags:
              kokkos: -DKokkos_ENABLE_THREADS=ON -DKokkos_ENABLE_SERIAL=ON
              kokkos_fft:
              mini_mdft:
          - name: serial
            image: gcc
            compiler:
              cxx: g++
            cmake_flags:
              kokkos: -DKokkos_ENABLE_SERIAL=ON
              kokkos_fft:
              mini_mdft:
          - name: cuda
            image: nvcc
            compiler:
              cxx: g++
            cmake_flags:
              kokkos: -DKokkos_ENABLE_CUDA=ON -DKokkos_ARCH_AMPERE80=ON
              kokkos_fft: -DKokkosFFT_ENABLE_HOST_AND_DEVICE=ON
              mini_mdft: 
          - name: hip
            image: rocm
            compiler:
              cxx: hipcc
            cmake_flags:
              kokkos: -DKokkos_ENABLE_HIP=ON -DKokkos_ARCH_VEGA90A=ON
              kokkos_fft: -DKokkosFFT_ENABLE_HOST_AND_DEVICE=ON -DKokkosFFT_ENABLE_ROCFFT=ON
              mini_mdft: 
          - name: sycl
            image: intel
            compiler:
              cxx: icpx
            cmake_flags:
              # building for Intel PVC was unsuccessful without the proper
              # device, so for now, we simply generate generic Intel GPU code
              kokkos: -DKokkos_ENABLE_SYCL=ON -DKokkos_ARCH_INTEL_GEN=ON
              kokkos_fft: -DKokkosFFT_ENABLE_HOST_AND_DEVICE=ON
              mini_mdft:

    steps:
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@v1.3.1
        with:
          tool-cache: true
          large-packages: false

      - name: Checkout built branch
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Configure
        run: |
          docker run -v ${{ github.workspace }}:/work ghcr.io/yasahi-hpc/mini-mdft/base_${{ matrix.backend.image }}_${{ needs.check_docker_files.outputs.image_suffix }}:${{ needs.check_docker_files.outputs.image_tag }} \
            cmake -B build \
            -DCMAKE_CXX_COMPILER=${{ matrix.backend.compiler.cxx }} \
            -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
            -DCMAKE_CXX_STANDARD=20 \
            -DMini_MDFT_ENABLE_TESTS=ON \
            -DMini_MDFT_ENABLE_INTERNAL_KOKKOS=ON \
            -DMini_MDFT_ENABLE_INTERNAL_KOKKOSFFT=ON \
            ${{ matrix.backend.cmake_flags.kokkos }} \
            ${{ matrix.backend.cmake_flags.kokkos_fft }} \
            ${{ matrix.backend.cmake_flags.mini_mdft }}
            
      - name: Build
        run: |
          docker run -v ${{ github.workspace }}:/work ghcr.io/yasahi-hpc/mini-mdft/base_${{ matrix.backend.image }}_${{ needs.check_docker_files.outputs.image_suffix }}:${{ needs.check_docker_files.outputs.image_tag }} \
            cmake --build build -j 4

      - name: Prepare artifacts
        # this is mandatory to preserve execution rights
        run: tar -cvf tests_${{ matrix.backend.name }}.tar build/ data/ input/

      - name: Save artifacts
        uses: actions/upload-artifact@v4
        with:
          name: tests_${{ matrix.backend.name }}
          path: tests_${{ matrix.backend.name }}.tar

      - name: Configure, build and install Kokkos as library
        run: |
          docker run -v ${{ github.workspace }}:/work ghcr.io/yasahi-hpc/mini-mdft/base_${{ matrix.backend.image }}_${{ needs.check_docker_files.outputs.image_suffix }}:${{ needs.check_docker_files.outputs.image_tag }} \
            cmake -B build_kokkos \
            -DCMAKE_INSTALL_PREFIX=/work/install \
            -DCMAKE_CXX_COMPILER=${{ matrix.backend.compiler.cxx }} \
            -DCMAKE_CXX_STANDARD=20 \
            -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
            ${{ matrix.backend.cmake_flags.kokkos }} \
            tpls/kokkos
          docker run -v ${{ github.workspace }}:/work ghcr.io/yasahi-hpc/mini-mdft/base_${{ matrix.backend.image }}_${{ needs.check_docker_files.outputs.image_suffix }}:${{ needs.check_docker_files.outputs.image_tag }} \
            cmake --build build_kokkos -j $(( $(nproc) * 2 + 1 ))
          docker run -v ${{ github.workspace }}:/work ghcr.io/yasahi-hpc/mini-mdft/base_${{ matrix.backend.image }}_${{ needs.check_docker_files.outputs.image_suffix }}:${{ needs.check_docker_files.outputs.image_tag }} \
            cmake --install build_kokkos

      - name: Configure, build and install kokkos-fft as library
        run: |
          docker run -v ${{ github.workspace }}:/work ghcr.io/yasahi-hpc/mini-mdft/base_${{ matrix.backend.image }}_${{ needs.check_docker_files.outputs.image_suffix }}:${{ needs.check_docker_files.outputs.image_tag }} \
            cmake -B build_kokkos_fft \
            -DCMAKE_INSTALL_PREFIX=/work/install\
            -DCMAKE_PREFIX_PATH=/work/install \
            -DCMAKE_BUILD_TYPE=${{ matrix.backend.cmake_build_type }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.backend.compiler.cxx }} \
            -DCMAKE_CXX_STANDARD=20 \
            -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
            ${{ matrix.backend.cmake_flags.kokkos_fft }} 
          docker run -v ${{ github.workspace }}:/work ghcr.io/yasahi-hpc/mini-mdft/base_${{ matrix.backend.image }}_${{ needs.check_docker_files.outputs.image_suffix }}:${{ needs.check_docker_files.outputs.image_tag }} \
            cmake --build build_kokkos_fft -j $(( $(nproc) * 2 + 1 ))
          docker run -v ${{ github.workspace }}:/work ghcr.io/yasahi-hpc/mini-mdft/base_${{ matrix.backend.image }}_${{ needs.check_docker_files.outputs.image_suffix }}:${{ needs.check_docker_files.outputs.image_tag }} \
            cmake --install build_kokkos_fft

      - name: Configure and build the project
        run: |
          docker run -v ${{ github.workspace }}:/work ghcr.io/yasahi-hpc/mini-mdft/base_${{ matrix.backend.image }}_${{ needs.check_docker_files.outputs.image_suffix }}:${{ needs.check_docker_files.outputs.image_tag }} \
            cmake -B build_installed \
            -DCMAKE_BUILD_TYPE=${{ matrix.backend.cmake_build_type }} \
            -DCMAKE_PREFIX_PATH=/work/install \
            -DCMAKE_CXX_COMPILER=${{ matrix.backend.compiler.cxx }} \
            -DCMAKE_CXX_STANDARD=20 \
            ${{ matrix.backend.cmake_flags.mini_mdft }}
          docker run -v ${{ github.workspace }}:/work ghcr.io/yasahi-hpc/mini-mdft/base_${{ matrix.backend.image }}_${{ needs.check_docker_files.outputs.image_suffix }}:${{ needs.check_docker_files.outputs.image_tag }} \
            cmake --build build_installed -j $(( $(nproc) * 2 + 1 ))

  test:
    runs-on: ${{ matrix.backend.runner }}
    continue-on-error: ${{ matrix.backend.unstable }}

    needs:
      - check_docker_files
      - build

    # run this job even if build_base did not run
    if: ${{ ! cancelled() && needs.build.result == 'success' }}

    strategy:
      matrix:
        backend:
          # run OpenMP tests on Azure server
          - name: openmp
            image: gcc
            runner: ubuntu-latest
            unstable: false
          # run Threads tests on Azure server
          - name: threads
            image: gcc
            runner: ubuntu-latest
            unstable: false
          # run Serial tests on Azure server
          - name: serial
            image: gcc
            runner: ubuntu-latest
            unstable: false
      
    steps:
      - name: Get artifacts
        uses: actions/download-artifact@v4
        with:
          name: tests_${{ matrix.backend.name }}

      - name: Deploy artifacts
        run: tar -xvf tests_${{ matrix.backend.name }}.tar

      - name: Login in GitHub Containers Repository with Docker
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run OpenMP/Threads/Serial tests within Docker image
        run: |
          docker run -v ${{github.workspace}}:/work ghcr.io/yasahi-hpc/mini-mdft/base_${{ matrix.backend.image }}_${{ needs.check_docker_files.outputs.image_suffix }}:${{ needs.check_docker_files.outputs.image_tag }} \
          ctest --test-dir build/unit_test --output-on-failure
